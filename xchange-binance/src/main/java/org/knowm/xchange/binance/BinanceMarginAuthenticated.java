package org.knowm.xchange.binance;

import org.knowm.xchange.binance.dto.BinanceException;
import org.knowm.xchange.binance.dto.account.BinanceMarginAccountInformation;
import org.knowm.xchange.binance.dto.trade.*;
import si.mazi.rescu.ParamsDigest;
import si.mazi.rescu.SynchronizedValueFactory;

import javax.ws.rs.*;
import javax.ws.rs.core.MediaType;
import java.io.IOException;
import java.math.BigDecimal;
import java.util.List;
import java.util.Map;

@Path("")
@Produces(MediaType.APPLICATION_JSON)
public interface BinanceMarginAuthenticated extends BinanceAuthenticated {

  @GET
  @Path("sapi/v1/margin/account")
  /**
   * Get current account information.
   *
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  BinanceMarginAccountInformation marginAccount(
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;

  @Override
  @POST
  @Path("sapi/v1/margin/order")
  /**
   * Send in a new order
   *
   * @param symbol
   * @param side
   * @param type
   * @param timeInForce
   * @param quantity
   * @param price optional, must be provided for limit orders only
   * @param newClientOrderId optional, a unique id for the order. Automatically generated if not
   *     sent.
   * @param stopPrice optional, used with stop orders
   * @param icebergQty optional, used with iceberg orders
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  BinanceNewOrder newOrder(
          @FormParam("symbol") String symbol,
          @FormParam("side") OrderSide side,
          @FormParam("type") OrderType type,
          @FormParam("timeInForce") TimeInForce timeInForce,
          @FormParam("quantity") BigDecimal quantity,
          @FormParam("price") BigDecimal price,
          @FormParam("newClientOrderId") String newClientOrderId,
          @FormParam("stopPrice") BigDecimal stopPrice,
          @FormParam("icebergQty") BigDecimal icebergQty,
          @FormParam("recvWindow") Long recvWindow,
          @FormParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;

  @Override
  @GET
  @Path("sapi/v1/margin/order")
  /**
   * Check an order's status.<br>
   * Either orderId or origClientOrderId must be sent.
   *
   * @param symbol
   * @param orderId optional
   * @param origClientOrderId optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  BinanceOrder orderStatus(
          @QueryParam("symbol") String symbol,
          @QueryParam("orderId") long orderId,
          @QueryParam("origClientOrderId") String origClientOrderId,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;

  @Override
  @DELETE
  @Path("sapi/v1/margin/order")
  /**
   * Cancel an active order.
   *
   * @param symbol
   * @param orderId optional
   * @param origClientOrderId optional
   * @param newClientOrderId optional, used to uniquely identify this cancel. Automatically
   *     generated by default.
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  BinanceCancelledOrder cancelOrder(
          @QueryParam("symbol") String symbol,
          @QueryParam("orderId") long orderId,
          @QueryParam("origClientOrderId") String origClientOrderId,
          @QueryParam("newClientOrderId") String newClientOrderId,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;

  @Override
  @DELETE
  @Path("sapi/v1/margin/openOrders")
  /**
   * Cancels all active orders on a symbol. This includes OCO orders.
   *
   * @param symbol
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  List<BinanceCancelledOrder> cancelAllOpenOrders(
          @QueryParam("symbol") String symbol,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;


  @Override
  @GET
  @Path("sapi/v1/margin/openOrders")
  /**
   * Get all open orders on a symbol.
   *
   * @param symbol optional
   * @param recvWindow optional
   * @param timestamp
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  List<BinanceOrder> openOrders(
          @QueryParam("symbol") String symbol,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;

  @Override
  @GET
  @Path("sapi/v1/margin/allOrders")
  /**
   * Get all account orders; active, canceled, or filled. <br>
   * If orderId is set, it will get orders >= that orderId. Otherwise most recent orders are
   * returned.
   *
   * @param symbol
   * @param orderId optional
   * @param limit optional
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  List<BinanceOrder> allOrders(
          @QueryParam("symbol") String symbol,
          @QueryParam("orderId") Long orderId,
          @QueryParam("limit") Integer limit,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;

  @Override
  @GET
  @Path("sapi/v1/margin/myTrades")
  /**
   * Get trades for a specific account and symbol.
   *
   * @param symbol
   * @param startTime optional
   * @param endTime optional
   * @param limit optional, default 500; max 1000.
   * @param fromId optional, tradeId to fetch from. Default gets most recent trades.
   * @param recvWindow optional
   * @param timestamp
   * @param apiKey
   * @param signature
   * @return
   * @throws IOException
   * @throws BinanceException
   */
  List<BinanceTrade> myTrades(
          @QueryParam("symbol") String symbol,
          @QueryParam("limit") Integer limit,
          @QueryParam("startTime") Long startTime,
          @QueryParam("endTime") Long endTime,
          @QueryParam("fromId") Long fromId,
          @QueryParam("recvWindow") Long recvWindow,
          @QueryParam("timestamp") SynchronizedValueFactory<Long> timestamp,
          @HeaderParam(X_MBX_APIKEY) String apiKey,
          @QueryParam(SIGNATURE) ParamsDigest signature)
          throws IOException, BinanceException;

  /**
   * Returns a listen key for websocket login.
   *
   * @param apiKey the api key
   * @return
   * @throws BinanceException
   * @throws IOException
   */
  @POST
  @Path("/sapi/v1/userDataStream")
  BinanceListenKey startUserDataStream(@HeaderParam(X_MBX_APIKEY) String apiKey)
          throws IOException, BinanceException;

  /**
   * Keeps the authenticated websocket session alive.
   *
   * @param apiKey the api key
   * @param listenKey the api secret
   * @return
   * @throws BinanceException
   * @throws IOException
   */
  @PUT
  @Path("/sapi/v1/userDataStream?listenKey={listenKey}")
  Map<?, ?> keepAliveUserDataStream(
          @HeaderParam(X_MBX_APIKEY) String apiKey, @PathParam("listenKey") String listenKey)
          throws IOException, BinanceException;

  /**
   * Closes the websocket authenticated connection.
   *
   * @param apiKey the api key
   * @param listenKey the api secret
   * @return
   * @throws BinanceException
   * @throws IOException
   */
  @DELETE
  @Path("/sapi/v1/userDataStream?listenKey={listenKey}")
  Map<?, ?> closeUserDataStream(
          @HeaderParam(X_MBX_APIKEY) String apiKey, @PathParam("listenKey") String listenKey)
          throws IOException, BinanceException;
}
