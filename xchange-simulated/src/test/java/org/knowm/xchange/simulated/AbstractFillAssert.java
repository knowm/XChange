package org.knowm.xchange.simulated;

import org.assertj.core.api.AbstractObjectAssert;
import org.assertj.core.util.Objects;

/**
 * Abstract base class for {@link Fill} specific assertions - Generated by CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
abstract class AbstractFillAssert<S extends AbstractFillAssert<S, A>, A extends Fill>
    extends AbstractObjectAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractFillAssert}</code> to make assertions on actual Fill.
   *
   * @param actual the Fill we want to make assertions on.
   */
  protected AbstractFillAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual Fill's apiKey is equal to the given one.
   *
   * @param apiKey the given apiKey to compare the actual Fill's apiKey to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Fill's apiKey is not equal to the given one.
   */
  public S hasApiKey(String apiKey) {
    // check that actual Fill we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting apiKey of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualApiKey = actual.getApiKey();
    if (!Objects.areEqual(actualApiKey, apiKey)) {
      failWithMessage(assertjErrorMessage, actual, apiKey, actualApiKey);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Fill is taker.
   *
   * @return this assertion object.
   * @throws AssertionError - if the actual Fill is not taker.
   */
  public S isTaker() {
    // check that actual Fill we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is true
    if (!actual.isTaker()) {
      failWithMessage("\nExpecting that actual Fill is taker but is not.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Fill is not taker.
   *
   * @return this assertion object.
   * @throws AssertionError - if the actual Fill is taker.
   */
  public S isNotTaker() {
    // check that actual Fill we want to make assertions on is not null.
    isNotNull();

    // check that property call/field access is false
    if (actual.isTaker()) {
      failWithMessage("\nExpecting that actual Fill is not taker but is.");
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual Fill's trade is equal to the given one.
   *
   * @param trade the given trade to compare the actual Fill's trade to.
   * @return this assertion object.
   * @throws AssertionError - if the actual Fill's trade is not equal to the given one.
   */
  public S hasTrade(org.knowm.xchange.dto.trade.UserTrade trade) {
    // check that actual Fill we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage = "\nExpecting trade of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.knowm.xchange.dto.trade.UserTrade actualTrade = actual.getTrade();
    if (!Objects.areEqual(actualTrade, trade)) {
      failWithMessage(assertjErrorMessage, actual, trade, actualTrade);
    }

    // return the current assertion for method chaining
    return myself;
  }
}
