package org.knowm.xchange.simulated;

import org.assertj.core.util.Objects;
import org.knowm.xchange.dto.trade.UserTrade;

/**
 * Abstract base class for {@link UserTrade} specific assertions - Generated by
 * CustomAssertionGenerator.
 */
@javax.annotation.Generated(value = "assertj-assertions-generator")
abstract class AbstractUserTradeAssert<S extends AbstractUserTradeAssert<S, A>, A extends UserTrade>
    extends AbstractTradeAssert<S, A> {

  /**
   * Creates a new <code>{@link AbstractUserTradeAssert}</code> to make assertions on actual
   * UserTrade.
   *
   * @param actual the UserTrade we want to make assertions on.
   */
  protected AbstractUserTradeAssert(A actual, Class<S> selfType) {
    super(actual, selfType);
  }

  /**
   * Verifies that the actual UserTrade's feeAmount is equal to the given one.
   *
   * @param feeAmount the given feeAmount to compare the actual UserTrade's feeAmount to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserTrade's feeAmount is not equal to the given one.
   */
  public S hasFeeAmount(java.math.BigDecimal feeAmount) {
    // check that actual UserTrade we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage =
        "\nExpecting feeAmount of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    java.math.BigDecimal actualFeeAmount = actual.getFeeAmount();
    if (!Objects.areEqual(actualFeeAmount, feeAmount)) {
      failWithMessage(assertjErrorMessage, actual, feeAmount, actualFeeAmount);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual UserTrade's feeCurrency is equal to the given one.
   *
   * @param feeCurrency the given feeCurrency to compare the actual UserTrade's feeCurrency to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserTrade's feeCurrency is not equal to the given one.
   */
  public S hasFeeCurrency(org.knowm.xchange.currency.Currency feeCurrency) {
    // check that actual UserTrade we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage =
        "\nExpecting feeCurrency of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    org.knowm.xchange.currency.Currency actualFeeCurrency = actual.getFeeCurrency();
    if (!Objects.areEqual(actualFeeCurrency, feeCurrency)) {
      failWithMessage(assertjErrorMessage, actual, feeCurrency, actualFeeCurrency);
    }

    // return the current assertion for method chaining
    return myself;
  }

  /**
   * Verifies that the actual UserTrade's orderId is equal to the given one.
   *
   * @param orderId the given orderId to compare the actual UserTrade's orderId to.
   * @return this assertion object.
   * @throws AssertionError - if the actual UserTrade's orderId is not equal to the given one.
   */
  public S hasOrderId(String orderId) {
    // check that actual UserTrade we want to make assertions on is not null.
    isNotNull();

    // overrides the default error message with a more explicit one
    String assertjErrorMessage =
        "\nExpecting orderId of:\n  <%s>\nto be:\n  <%s>\nbut was:\n  <%s>";

    // null safe check
    String actualOrderId = actual.getOrderId();
    if (!Objects.areEqual(actualOrderId, orderId)) {
      failWithMessage(assertjErrorMessage, actual, orderId, actualOrderId);
    }

    // return the current assertion for method chaining
    return myself;
  }
}
