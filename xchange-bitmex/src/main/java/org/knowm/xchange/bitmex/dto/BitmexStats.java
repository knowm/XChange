/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)  ----  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ----  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.knowm.xchange.bitmex.dto;

import java.util.Objects;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.math.BigDecimal;

/**
 * Exchange Statistics
 */
@ApiModel(description = "Exchange Statistics")
@javax.annotation.Generated(value = "io.swagger.codegen.languages.JavaClientCodegen", date = "2018-02-06T17:10:23.689Z")
public class BitmexStats {
  @SerializedName("rootSymbol")
  private String rootSymbol = null;

  @SerializedName("currency")
  private String currency = null;

  @SerializedName("volume24h")
  private BigDecimal volume24h = null;

  @SerializedName("turnover24h")
  private BigDecimal turnover24h = null;

  @SerializedName("openInterest")
  private BigDecimal openInterest = null;

  @SerializedName("openValue")
  private BigDecimal openValue = null;

  public BitmexStats rootSymbol(String rootSymbol) {
    this.rootSymbol = rootSymbol;
    return this;
  }

   /**
   * Get rootSymbol
   * @return rootSymbol
  **/
  @ApiModelProperty(required = true, value = "")
  public String getRootSymbol() {
    return rootSymbol;
  }

  public void setRootSymbol(String rootSymbol) {
    this.rootSymbol = rootSymbol;
  }

  public BitmexStats currency(String currency) {
    this.currency = currency;
    return this;
  }

   /**
   * Get currency
   * @return currency
  **/
  @ApiModelProperty(value = "")
  public String getCurrency() {
    return currency;
  }

  public void setCurrency(String currency) {
    this.currency = currency;
  }

  public BitmexStats volume24h(BigDecimal volume24h) {
    this.volume24h = volume24h;
    return this;
  }

   /**
   * Get volume24h
   * @return volume24h
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getVolume24h() {
    return volume24h;
  }

  public void setVolume24h(BigDecimal volume24h) {
    this.volume24h = volume24h;
  }

  public BitmexStats turnover24h(BigDecimal turnover24h) {
    this.turnover24h = turnover24h;
    return this;
  }

   /**
   * Get turnover24h
   * @return turnover24h
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getTurnover24h() {
    return turnover24h;
  }

  public void setTurnover24h(BigDecimal turnover24h) {
    this.turnover24h = turnover24h;
  }

  public BitmexStats openInterest(BigDecimal openInterest) {
    this.openInterest = openInterest;
    return this;
  }

   /**
   * Get openInterest
   * @return openInterest
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getOpenInterest() {
    return openInterest;
  }

  public void setOpenInterest(BigDecimal openInterest) {
    this.openInterest = openInterest;
  }

  public BitmexStats openValue(BigDecimal openValue) {
    this.openValue = openValue;
    return this;
  }

   /**
   * Get openValue
   * @return openValue
  **/
  @ApiModelProperty(value = "")
  public BigDecimal getOpenValue() {
    return openValue;
  }

  public void setOpenValue(BigDecimal openValue) {
    this.openValue = openValue;
  }


  @Override
  public boolean equals(java.lang.Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    BitmexStats stats = (BitmexStats) o;
    return Objects.equals(this.rootSymbol, stats.rootSymbol) &&
        Objects.equals(this.currency, stats.currency) &&
        Objects.equals(this.volume24h, stats.volume24h) &&
        Objects.equals(this.turnover24h, stats.turnover24h) &&
        Objects.equals(this.openInterest, stats.openInterest) &&
        Objects.equals(this.openValue, stats.openValue);
  }

  @Override
  public int hashCode() {
    return Objects.hash(rootSymbol, currency, volume24h, turnover24h, openInterest, openValue);
  }


  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class BitmexStats {\n");
    
    sb.append("    rootSymbol: ").append(toIndentedString(rootSymbol)).append("\n");
    sb.append("    currency: ").append(toIndentedString(currency)).append("\n");
    sb.append("    volume24h: ").append(toIndentedString(volume24h)).append("\n");
    sb.append("    turnover24h: ").append(toIndentedString(turnover24h)).append("\n");
    sb.append("    openInterest: ").append(toIndentedString(openInterest)).append("\n");
    sb.append("    openValue: ").append(toIndentedString(openValue)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(java.lang.Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

