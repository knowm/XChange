/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)  ----  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ----  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.knowm.xchange.bitmex.service;

import org.knowm.xchange.bitmex.util.ApiCallback;
import org.knowm.xchange.bitmex.util.ApiClient;
import org.knowm.xchange.bitmex.util.ApiException;
import org.knowm.xchange.bitmex.util.ApiResponse;
import org.knowm.xchange.bitmex.util.Configuration;
import org.knowm.xchange.bitmex.util.Pair;
import org.knowm.xchange.bitmex.util.ProgressRequestBody;
import org.knowm.xchange.bitmex.util.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.math.BigDecimal;

import org.knowm.xchange.bitmex.dto.BitmexOrderBookL2;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OrderBookApi {
    private ApiClient apiClient;

    public OrderBookApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OrderBookApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for orderBookGetL2
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series. (required)
     * @param depth Orderbook depth per side. Send 0 for full depth. (optional, default to 25)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call orderBookGetL2Call(String symbol, BigDecimal depth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/orderBook/L2";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (symbol != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("symbol", symbol));
        if (depth != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("depth", depth));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json", "application/xml", "text/xml", "application/javascript", "text/javascript"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json", "application/x-www-form-urlencoded"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call orderBookGetL2ValidateBeforeCall(String symbol, BigDecimal depth, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'symbol' is set
        if (symbol == null) {
            throw new ApiException("Missing the required parameter 'symbol' when calling orderBookGetL2(Async)");
        }
        

        com.squareup.okhttp.Call call = orderBookGetL2Call(symbol, depth, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get current orderbook in vertical format.
     * 
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series. (required)
     * @param depth Orderbook depth per side. Send 0 for full depth. (optional, default to 25)
     * @return List&lt;BitmexOrderBookL2&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<BitmexOrderBookL2> orderBookGetL2(String symbol, BigDecimal depth) throws ApiException {
        ApiResponse<List<BitmexOrderBookL2>> resp = orderBookGetL2WithHttpInfo(symbol, depth);
        return resp.getData();
    }

    /**
     * Get current orderbook in vertical format.
     * 
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series. (required)
     * @param depth Orderbook depth per side. Send 0 for full depth. (optional, default to 25)
     * @return ApiResponse&lt;List&lt;BitmexOrderBookL2&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<BitmexOrderBookL2>> orderBookGetL2WithHttpInfo(String symbol, BigDecimal depth) throws ApiException {
        com.squareup.okhttp.Call call = orderBookGetL2ValidateBeforeCall(symbol, depth, null, null);
        Type localVarReturnType = new TypeToken<List<BitmexOrderBookL2>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get current orderbook in vertical format. (asynchronously)
     * 
     * @param symbol Instrument symbol. Send a series (e.g. XBT) to get data for the nearest contract in that series. (required)
     * @param depth Orderbook depth per side. Send 0 for full depth. (optional, default to 25)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call orderBookGetL2Async(String symbol, BigDecimal depth, final ApiCallback<List<BitmexOrderBookL2>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = orderBookGetL2ValidateBeforeCall(symbol, depth, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<BitmexOrderBookL2>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
