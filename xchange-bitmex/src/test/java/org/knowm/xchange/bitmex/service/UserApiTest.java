/*
 * BitMEX API
 * ## REST API for the BitMEX Trading Platform  [View Changelog](/app/apiChangelog)  ----  #### Getting Started  Base URI: [https://www.bitmex.com/api/v1](/api/v1)  ##### Fetching Data  All REST endpoints are documented below. You can try out any query right from this interface.  Most table queries accept `count`, `start`, and `reverse` params. Set `reverse=true` to get rows newest-first.  Additional documentation regarding filters, timestamps, and authentication is available in [the main API documentation](/app/restAPI).  *All* table data is available via the [Websocket](/app/wsAPI). We highly recommend using the socket if you want to have the quickest possible data without being subject to ratelimits.  ##### Return Types  By default, all data is returned as JSON. Send `?_format=csv` to get CSV data or `?_format=xml` to get XML data.  ##### Trade Data Queries  *This is only a small subset of what is available, to get you started.*  Fill in the parameters and click the `Try it out!` button to try any of these queries.  * [Pricing Data](#!/Quote/Quote_get)  * [Trade Data](#!/Trade/Trade_get)  * [OrderBook Data](#!/OrderBook/OrderBook_getL2)  * [Settlement Data](#!/Settlement/Settlement_get)  * [Exchange Statistics](#!/Stats/Stats_history)  Every function of the BitMEX.com platform is exposed here and documented. Many more functions are available.  ##### Swagger Specification  [â‡© Download Swagger JSON](swagger.json)  ----  ## All API Endpoints  Click to expand a section. 
 *
 * OpenAPI spec version: 1.2.0
 * Contact: support@bitmex.com
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package org.knowm.xchange.bitmex.service;

import org.knowm.xchange.bitmex.util.ApiException;
import java.math.BigDecimal;
import org.knowm.xchange.bitmex.dto.BitmexAccessToken;
import org.knowm.xchange.bitmex.dto.BitmexAffiliate;
import org.knowm.xchange.bitmex.dto.BitmexMargin;
import org.knowm.xchange.bitmex.dto.BitmexTransaction;
import org.knowm.xchange.bitmex.dto.BitmexUser;
import org.knowm.xchange.bitmex.dto.BitmexUserCommission;
import org.knowm.xchange.bitmex.dto.BitmexWallet;
import org.junit.Test;
import org.junit.Ignore;

import java.util.List;

/**
 * API tests for UserApi
 */
@Ignore
public class UserApiTest {

    private final UserApi api = new UserApi();

    
    /**
     * Cancel a withdrawal.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCancelWithdrawalTest() throws ApiException {
        String token = null;
        BitmexTransaction response = api.userCancelWithdrawal(token);

        // TODO: test validations
    }
    
    /**
     * Check if a referral code is valid.
     *
     * If the code is valid, responds with the referral code&#39;s discount (e.g. &#x60;0.1&#x60; for 10%). Otherwise, will return a 404.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userCheckReferralCodeTest() throws ApiException {
        String referralCode = null;
        Double response = api.userCheckReferralCode(referralCode);

        // TODO: test validations
    }
    
    /**
     * Confirm your email address with a token.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userConfirmTest() throws ApiException {
        String token = null;
        BitmexAccessToken response = api.userConfirm(token);

        // TODO: test validations
    }
    
    /**
     * Confirm two-factor auth for this account. If using a Yubikey, simply send a token to this endpoint.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userConfirmEnableTFATest() throws ApiException {
        String token = null;
        String type = null;
        Boolean response = api.userConfirmEnableTFA(token, type);

        // TODO: test validations
    }
    
    /**
     * Confirm a withdrawal.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userConfirmWithdrawalTest() throws ApiException {
        String token = null;
        BitmexTransaction response = api.userConfirmWithdrawal(token);

        // TODO: test validations
    }
    
    /**
     * Disable two-factor auth for this account.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userDisableTFATest() throws ApiException {
        String token = null;
        String type = null;
        Boolean response = api.userDisableTFA(token, type);

        // TODO: test validations
    }
    
    /**
     * Get your user model.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetTest() throws ApiException {
        BitmexUser response = api.userGet();

        // TODO: test validations
    }
    
    /**
     * Get your current affiliate/referral status.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetAffiliateStatusTest() throws ApiException {
        BitmexAffiliate response = api.userGetAffiliateStatus();

        // TODO: test validations
    }
    
    /**
     * Get your account&#39;s commission status.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetCommissionTest() throws ApiException {
        List<BitmexUserCommission> response = api.userGetCommission();

        // TODO: test validations
    }
    
    /**
     * Get a deposit address.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetDepositAddressTest() throws ApiException {
        String currency = null;
        String response = api.userGetDepositAddress(currency);

        // TODO: test validations
    }
    
    /**
     * Get your account&#39;s margin status. Send a currency of \&quot;all\&quot; to receive an array of all supported currencies.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetMarginTest() throws ApiException {
        String currency = null;
        BitmexMargin response = api.userGetMargin(currency);

        // TODO: test validations
    }
    
    /**
     * Get your current wallet information.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetWalletTest() throws ApiException {
        String currency = null;
        BitmexWallet response = api.userGetWallet(currency);

        // TODO: test validations
    }
    
    /**
     * Get a history of all of your wallet transactions (deposits, withdrawals, PNL).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetWalletHistoryTest() throws ApiException {
        String currency = null;
        List<BitmexTransaction> response = api.userGetWalletHistory(currency);

        // TODO: test validations
    }
    
    /**
     * Get a summary of all of your wallet transactions (deposits, withdrawals, PNL).
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userGetWalletSummaryTest() throws ApiException {
        String currency = null;
        List<BitmexTransaction> response = api.userGetWalletSummary(currency);

        // TODO: test validations
    }
    
    /**
     * Log out of BitMEX.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userLogoutTest() throws ApiException {
        api.userLogout();

        // TODO: test validations
    }
    
    /**
     * Log all systems out of BitMEX. This will revoke all of your account&#39;s access tokens, logging you out on all devices.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userLogoutAllTest() throws ApiException {
        Double response = api.userLogoutAll();

        // TODO: test validations
    }
    
    /**
     * Get the minimum withdrawal fee for a currency.
     *
     * This is changed based on network conditions to ensure timely withdrawals. During network congestion, this may be high. The fee is returned in the same currency.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userMinWithdrawalFeeTest() throws ApiException {
        String currency = null;
        Object response = api.userMinWithdrawalFee(currency);

        // TODO: test validations
    }
    
    /**
     * Get secret key for setting up two-factor auth.
     *
     * Use /confirmEnableTFA directly for Yubikeys. This fails if TFA is already enabled.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRequestEnableTFATest() throws ApiException {
        String type = null;
        Boolean response = api.userRequestEnableTFA(type);

        // TODO: test validations
    }
    
    /**
     * Request a withdrawal to an external wallet.
     *
     * This will send a confirmation email to the email address on record, unless requested via an API Key with the &#x60;withdraw&#x60; permission.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userRequestWithdrawalTest() throws ApiException {
        String currency = null;
        BigDecimal amount = null;
        String address = null;
        String otpToken = null;
        Double fee = null;
        BitmexTransaction response = api.userRequestWithdrawal(currency, amount, address, otpToken, fee);

        // TODO: test validations
    }
    
    /**
     * Save user preferences.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userSavePreferencesTest() throws ApiException {
        String prefs = null;
        Boolean overwrite = null;
        BitmexUser response = api.userSavePreferences(prefs, overwrite);

        // TODO: test validations
    }
    
    /**
     * Update your password, name, and other attributes.
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void userUpdateTest() throws ApiException {
        String firstname = null;
        String lastname = null;
        String oldPassword = null;
        String newPassword = null;
        String newPasswordConfirm = null;
        String username = null;
        String country = null;
        String pgpPubKey = null;
        BitmexUser response = api.userUpdate(firstname, lastname, oldPassword, newPassword, newPasswordConfirm, username, country, pgpPubKey);

        // TODO: test validations
    }
    
}
